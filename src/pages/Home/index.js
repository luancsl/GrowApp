import React, { Component } from "react";
import { View, Text, StyleSheet, Dimensions, TextInput, FlatList, TouchableOpacity, AsyncStorage } from "react-native";
import ScrollableTabView, { ScrollableTabBar, } from 'react-native-scrollable-tab-view';
import { sia, requestElevation } from "../../services/sia_api";
import MapView from "react-native-maps";
import { Header, ListItem } from 'react-native-elements'
import Modal from 'react-native-modalbox';
import PushNotification from 'react-native-push-notification';
import SpaceComponent from './components/space_component';
import { material, systemWeights } from 'react-native-typography';
import { connect } from "react-redux";
import { bindActionCreators } from "redux";
import { Creators as SpaceActions } from "../../store/ducks/space";

class Home extends Component {
    state = {
        etc_list: [],
        data: null,
        place: {
            id: 1,
            title: "ETo",
            description: "carregando",
            latitude: -8.896182,
            longitude: -36.502563,
            dataIncial: "20190516",
            dataFinal: "20190516",
            error: null
        },
        space: null
    };

    async componentWillMount() {
        const etc_list = JSON.parse(await AsyncStorage.getItem('etc_list'));
        console.log("duda", etc_list);
        this.setState({ etc_list: etc_list });
    }

    get_data(atraso) {
        let data = new Date();
        data.setDate(data.getDate() + atraso);
        console.log(data.getMonth());
        let dia = data.getDate();
        let mes = data.getMonth() + 1;
        let ano = data.getFullYear();
        let result = ano + ('0' + mes).slice(-2) + ('0' + dia).slice(-2);
        return result;
    }

    setCoordenadas(lat, long) {
        let place = this.state.place;
        place.latitude = lat;
        place.longitude = long;
        this.setState({ place: place });
    }

    getLocation() {
        navigator.geolocation.getCurrentPosition(
            position => {
                let place = this.state.place;
                place.latitude = position.coords.latitude;
                place.longitude = position.coords.longitude;
                this.setState({ place: place });
            },
            error => {
                let place = this.state.place;
                place.error = error.message;
                this.setState({ place: place });
            },
            { enableHighAccuracy: true, timeout: 30000, maximumAge: 1000 }
        );
    }

    async get_pet() {
        let place = this.state.place;
        place.description = "carregando...";
        const resposta = await sia.eto(place.latitude, place.longitude, place.dataIncial, place.dataFinal, 60);
        this.setState({ data: resposta })
        const eto = resposta.features.data[0].Eto;
        const elevacao = resposta.features.parameters.location.elevation
        console.log(resposta);
        place.description = `${eto} mm/d ${elevacao} elev`;
        this.setState({ place: place });
    }

    set_data() {
        const data = this.get_data(-8);
        let place = this.state.place;
        place.dataIncial = data;
        place.dataFinal = data;
        console.log(place);
        this.setState({ place: place });
    }

    componentDidMount() {
        this.set_data();

        this.get_pet();
    }

    _onPressKcSelection() {
        this.props.navigation.navigate('KcSelection', { eto_data: this.state.data });
        PushNotification.localNotification({
            /* Android Only Properties */
            id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            ticker: "My Notification Ticker", // (optional)
            autoCancel: true, // (optional) default: true
            largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
            smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
            subText: "This is a subText", // (optional) default: none
            color: "red", // (optional) default: system default
            vibrate: true, // (optional) default: true
            vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            tag: 'some_tag', // (optional) add tag to message
            group: "group", // (optional) add group to message
            ongoing: false, // (optional) set whether this is an "ongoing" notification
            priority: "low", // (optional) set notification priority, default: high
            visibility: "private", // (optional) set notification visibility, default: private
            importance: "unspecified", // (optional) set notification importance, default: high
            /* iOS and Android properties */
            title: "My Notification Title", // (optional)
            message: "My Notification Message", // (required)
            playSound: true, // (optional) default: true
            soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
            //number: '1', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
            //repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
            actions: '["Yes", "No", "Exit"]',  // (Android only) See the doc for notification actions to know more
        });
    }

    render() {
        const { latitude, longitude } = this.state.place;

        const { spaces, addSpace } = this.props;

        console.log("aqui", spaces);
        window.state = spaces;

        return (
            <View style={{ flex: 1 }}>
                <Header
                    leftComponent={{ icon: 'menu', color: '#fff', onPress: () => this.props.navigation.toggleDrawer() }}
                    centerComponent={{ text: 'GROW APP', style: { color: '#fff' } }}
                    rightComponent={{ icon: 'home', color: '#fff' }}
                />
                <Modal style={[styles.modal, styles.modal4]} position={"bottom"} ref={"modal4"} coverScreen={true}>
                    <Text style={styles.text}>Modal on bottom with backdrop</Text>
                </Modal>
                <View style={{ flex: 1 }}>
                    <ScrollableTabView
                        initialPage={0}
                        renderTabBar={() => <ScrollableTabBar />}
                    >
                        <View tabLabel='EspaÃ§os' onStartShouldSetResponder={() => true}>
                            <FlatList
                                keyExtractor={this.keyExtractor}
                                data={spaces}
                                renderItem={({ item }) => (
                                    <SpaceComponent
                                        name={item.name}
                                        eto={item.eto}
                                        culture={item.kc}
                                        select={item.phase_select}
                                        time={item.time}
                                        currentTime={item.currentTime}
                                    />
                                )}
                            />
                        </View>
                        <View tabLabel='Mapa' onStartShouldSetResponder={() => true}>
                            <View style={styles.container}>
                                <MapView
                                    ref={map => (this.mapView = map)}
                                    initialRegion={{
                                        latitude,
                                        longitude,
                                        latitudeDelta: 0.0142,
                                        longitudeDelta: 0.0231
                                    }}
                                    onPress={() => {
                                        this.refs.modal4.open();
                                        PushNotification.cancelAllLocalNotifications();
                                    }}
                                    onLongPress={e => {
                                        let event = e.nativeEvent;
                                        console.log("press", event);
                                        this.setCoordenadas(
                                            event.coordinate.latitude,
                                            event.coordinate.longitude
                                        );
                                        this.get_pet();
                                        this._onPressKcSelection();
                                    }}
                                    style={styles.mapView}
                                    rotateEnabled={false}
                                    scrollEnabled={true}
                                    zoomEnabled={true}
                                    showsPointsOfInterest={false}
                                    showBuildings={false}
                                    showsUserLocation={true}
                                    followsUserLocation={true}
                                    showsMyLocationButton={true}
                                    showsPointsOfInterest={true}
                                    showsCompass={true}
                                >
                                    {
                                        <MapView.Marker
                                            ref={mark => (this.state.place.mark = mark)}
                                            title={"RegiÃ£o"}
                                            description={`${this.state.place.latitude},${
                                                this.state.place.longitude
                                                }`}
                                            key={this.state.place.id}
                                            coordinate={{
                                                latitude: this.state.place.latitude,
                                                longitude: this.state.place.longitude
                                            }}
                                        />
                                    }
                                </MapView>

                                {/* <View key={this.state.place.id} style={styles.place}>
                                    <Text style={styles.title}>{this.state.place.title}</Text>
                                    <Text style={styles.description}>{this.state.place.description}</Text>
                                </View> */}
                            </View>
                        </View>
                    </ScrollableTabView>
                </View>
            </View>
        );
    }
}

const mapStateToProps = state => ({
    spaces: state.spaceState
});

const mapDispatchToProps = dispatch =>
    bindActionCreators(SpaceActions, dispatch);

export default connect(
    mapStateToProps,
    mapDispatchToProps
)(Home);


const styles = StyleSheet.create({
    modal: {
        justifyContent: 'center',
        alignItems: 'center'
    },
    modal3: {
        height: 300,
        width: 300
    },
    modal4: {
        height: 150
    },
    calloutView: {
        flexDirection: "row",
        backgroundColor: "rgba(255, 255, 255, 0.9)",
        borderRadius: 10,
        width: "40%",
        marginLeft: "30%",
        marginRight: "30%",
        marginTop: 20
    },
    calloutSearch: {
        borderColor: "transparent",
        marginLeft: 10,
        width: "90%",
        marginRight: 10,
        height: 40,
        borderWidth: 0.0
    },
    container: {
        justifyContent: 'flex-end',
        alignContent: 'space-between',
    },

    mapView: {
        height: '100%',
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,

    },

    placesContainer: {
        width: "100%",
        maxHeight: 200
    },

    place: {
        height: 150,
        backgroundColor: "#FFF",
        borderTopLeftRadius: 5,
        borderTopRightRadius: 5,
        padding: 12,
        borderWidth: 1.5,
        borderColor: '#0003',
    },

    title: {
        fontWeight: "bold",
        fontSize: 12,
        backgroundColor: "transparent"
    },

    description: {
        color: "#999",
        fontSize: 12,
        marginTop: 5
    }
});
